// Generated by CoffeeScript 1.4.0
var $, ASTCoffeeScriptReplacer, ASTDepManager, ASTNamespaceWrapper, AST_TRANSFORMERS, BUILD_DIR, BUILD_ENV, COFFEE, COFFEEKUP, HTML, JSTF, MUSTACHE, Module, REDIS_DB_INDEX, Redis, STYLUS, TRANSFORM_COFFEESCRIPT_REPLACER, TRANSFORM_NAMESPACE_WRAPPER, basename, cake, ck, coffee, escodegen, esprima, ff_coffee, ff_coffeekup, ff_copy, ff_html, ff_js, ff_merge, ff_mustache, ff_stylus, freeDBFS, fs_coffee, fs_coffeekup, fs_html, fs_js, fs_merge, fs_mustache, fs_stylus, hogan, initDBFS, is_dbfs, mkdirp, mkdirp_async, mkdirp_sync, read, s_dbfs, sf_coffee, sf_coffeekup, sf_html, sf_js, sf_merge, sf_mustache, sf_stylus, ss_coffee, ss_coffeekup, ss_html, ss_js, ss_merge, ss_mustache, ss_stylus, stylus, write, _createRedisClient, _ref;

BUILD_ENV = process.env["BUILD_ENV"];

if (BUILD_ENV) {
  require(BUILD_ENV);
}

$ = global.$ || false;

BUILD_DIR = global.BUILD_DIR || __dirname;

REDIS_DB_INDEX = REDIS_DB_INDEX || 0;

if (!$) {
  $ = require('core.js');
  $.ext(require('path'));
  $.ext(require('fs'));
  $.ext(require('util'));
  $.ext(require('child_process'));
}

Redis = require("redis");

coffee = require("coffee-script");

stylus = require("stylus");

hogan = require("hogan.js");

ck = require("./coffeekup");

esprima = require("esprima");

escodegen = require("escodegen");

Module = require("module");

_ref = require("" + BUILD_DIR + "/ast/ast-transformers"), ASTDepManager = _ref.ASTDepManager, ASTNamespaceWrapper = _ref.ASTNamespaceWrapper, ASTCoffeeScriptReplacer = _ref.ASTCoffeeScriptReplacer;

COFFEE = "coffee";

STYLUS = "stylus";

COFFEEKUP = "coffeekup";

MUSTACHE = "mustache";

JSTF = "js";

HTML = "html";

TRANSFORM_COFFEESCRIPT_REPLACER = "cs_replacer";

TRANSFORM_NAMESPACE_WRAPPER = "ns_wrapper";

AST_TRANSFORMERS = {};

AST_TRANSFORMERS[TRANSFORM_COFFEESCRIPT_REPLACER] = function(ast, opt) {
  return (new ASTCoffeeScriptReplacer()).walk(ast);
};

AST_TRANSFORMERS[TRANSFORM_NAMESPACE_WRAPPER] = function(ast, opt) {
  return (new ASTNamespaceWrapper({
    name: opt.namespace
  })).walk(ast);
};

basename = function(path) {
  return /^(?:.*\/)?(.+?)(?:\.[^\.]*)?$/.exec(path)[1];
};

_createRedisClient = function(opt) {
  var dbfs, _ref1, _ref2;
  if (opt == null) {
    opt = {};
  }
  if ((_ref1 = opt.port) == null) {
    opt.port = 6379;
  }
  if ((_ref2 = opt.index) == null) {
    opt.index = 0;
  }
  dbfs = Redis.createClient(opt.port);
  dbfs.select(opt.index);
  return dbfs;
};

s_dbfs = null;

initDBFS = function() {
  return s_dbfs = _createRedisClient({
    index: REDIS_DB_INDEX
  });
};

freeDBFS = function() {
  if (s_dbfs) {
    s_dbfs.end();
    return s_dbfs = null;
  }
};

is_dbfs = function(path) {
  return $.startsWith(path, "dbfs:");
};

read = function(src, done) {
  if (is_dbfs(src)) {
    return s_dbfs.get(src, done);
  } else {
    return $.readFile(src, 'utf-8', done);
  }
};

write = function(dst, str, done) {
  if (is_dbfs(dst)) {
    return s_dbfs.set(dst, str, done);
  } else {
    return $.writeFile(dst, str, "utf-8", done);
  }
};

ss_coffee = function(str, opt, done) {
  return done(null, coffee.compile(str, opt));
};

ss_stylus = function(str, opt, done) {
  return stylus.render(str, opt, done);
};

ss_html = function(str, opt, done) {
  var html_minify, _ref1;
  if ((_ref1 = opt.compress) == null) {
    opt.compress = true;
  }
  if (opt.compress) {
    html_minify = require("html-minifier").minify;
    str = html_minify(str, $.defaults(opt, {
      removeEmptyElements: false,
      removeEmptyAttributes: true,
      removeAttributeQuotes: false,
      removeComments: true,
      collapseBooleanAttributes: true,
      collapseWhitespace: true,
      removeCDATASectionsFromCDATA: false
    }));
    delete global.reStackedTag;
  } else {

  }
  return done(null, str);
};

ss_js = function(str, opt, done) {
  var UglifyJS, ast, compressor, tfname, uast, _i, _len, _ref1;
  ast = esprima.parse(str, opt);
  if (opt.transform) {
    _ref1 = opt.transform;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      tfname = _ref1[_i];
      ast = AST_TRANSFORMERS[tfname](ast, opt);
    }
  }
  if (opt.compress) {
    UglifyJS = require("uglify-js");
    uast = UglifyJS.AST_Node.from_mozilla_ast(ast);
    uast.figure_out_scope();
    compressor = UglifyJS.Compressor(opt.compressor);
    uast = uast.transform(compressor);
    uast.figure_out_scope();
    uast.compute_char_frequency();
    uast.mangle_names();
    str = uast.print_to_string(opt.printer);
  } else {
    str = escodegen.generate(ast);
  }
  return done(null, str);
};

ss_mustache = function(str, opt, done) {
  try {
    str = hogan.compile(str, opt);
    if (!opt.asString) {
      str = str.render(opt.locals, opt.partials);
    }
  } catch (err) {
    return done(err);
  }
  return done(null, str);
};

ss_coffeekup = function(str, opt, done) {
  try {
    str = ck.render(str, opt);
  } catch (err) {
    return done(err);
  }
  return done(null, str);
};

ss_merge = function(strs, opt, done) {
  var res, sep, str, _i, _len;
  sep = opt.separator || "\n\n";
  res = "";
  for (_i = 0, _len = strs.length; _i < _len; _i++) {
    str = strs[_i];
    res += $.trim(str) + sep;
  }
  return done(null, res);
};

fs_coffee = function(src, opt, done) {
  return $.chain([
    function(cb) {
      return read(src, cb);
    }, function(err, str) {
      return ss_coffee(str, opt, done);
    }
  ], done);
};

fs_stylus = function(src, opt, done) {
  if (!opt.filename) {
    opt.filename = src;
  }
  return $.chain([
    function(cb) {
      return read(src, cb);
    }, function(err, str) {
      return ss_stylus(str, opt, done);
    }
  ], done);
};

fs_html = function(src, opt, done) {
  return $.chain([
    function(cb) {
      return read(src, cb);
    }, function(err, str) {
      return ss_html(str, opt, done);
    }
  ], done);
};

fs_js = function(src, opt, done) {
  return $.chain([
    function(cb) {
      return read(src, cb);
    }, function(err, str) {
      return ss_js(str, opt, done);
    }
  ], done);
};

fs_mustache = function(src, opt, done) {
  return $.chain([
    function(cb) {
      return read(src, cb);
    }, function(err, str) {
      return ss_mustache(str, opt, done);
    }
  ], done);
};

fs_coffeekup = function(src, opt, done) {
  return $.chain([
    function(cb) {
      return read(src, cb);
    }, function(err, str) {
      return ss_coffeekup(str, opt, done);
    }
  ], done);
};

fs_merge = function(srcs, opt, done) {
  return $.chain([
    function(cb) {
      return $.asyncMap(srcs, read, cb);
    }, function(err, strs) {
      return ss_merge(strs, opt, done);
    }
  ], done);
};

sf_coffee = function(str, dst, opt, done) {
  return $.chain([
    function(cb) {
      return ss_coffee(str, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

sf_stylus = function(str, dst, opt, done) {
  return $.chain([
    function(cb) {
      return ss_stylus(str, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

sf_html = function(str, dst, opt, done) {
  return $.chain([
    function(cb) {
      return ss_html(str, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

sf_js = function(str, dst, opt, done) {
  return $.chain([
    function(cb) {
      return ss_js(str, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

sf_mustache = function(str, dst, opt, done) {
  return $.chain([
    function(cb) {
      return ss_mustache(str, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

sf_coffeekup = function(str, dst, opt, done) {
  return $.chain([
    function(cb) {
      return ss_coffeekup(str, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

sf_merge = function(strs, dst, opt, done) {
  return $.chain([
    function(cb) {
      return ss_merge(strs, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

ff_copy = function(src, dst, opt, done) {
  return $.chain([
    function(cb) {
      return read(src, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

ff_coffee = function(src, dst, opt, done) {
  return $.chain([
    function(cb) {
      return fs_coffee(src, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

ff_stylus = function(src, dst, opt, done) {
  return $.chain([
    function(cb) {
      return fs_stylus(src, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

ff_html = function(src, dst, opt, done) {
  return $.chain([
    function(cb) {
      return fs_html(src, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

ff_js = function(src, dst, opt, done) {
  return $.chain([
    function(cb) {
      return fs_js(src, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

ff_mustache = function(src, dst, opt, done) {
  return $.chain([
    function(cb) {
      return fs_mustache(src, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

ff_coffeekup = function(src, dst, opt, done) {
  return $.chain([
    function(cb) {
      return fs_coffeekup(src, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

ff_merge = function(srcs, dst, opt, done) {
  return $.chain([
    function(cb) {
      return fs_merge(srcs, opt, cb);
    }, function(err, str) {
      return write(dst, str, done);
    }
  ], done);
};

cake = function(cakedir, done) {
  var cakefile, code, complete;
  cakefile = "" + cakedir + "/Cakefile";
  complete = function(code) {
    var curdir, mod;
    code = coffee.compile(code, {
      bare: true
    });
    mod = new Module(cakefile, null);
    curdir = process.cwd();
    process.chdir(cakedir);
    mod._compile(code, cakefile);
    process.chdir(curdir);
    return mod.exports;
  };
  if ($.isFunction(done)) {
    return $.chain([
      function(cb) {
        return $.realpath(cakefile, cb);
      }, function(err, cakefile, cb) {
        return $.readFile(cakefile, "utf-8", cb);
      }, function(err, code) {
        return done(null, complete(code));
      }
    ], done);
  } else {
    cakefile = $.realpathSync(cakefile);
    code = $.readFileSync(cakefile, "utf-8");
    return complete(code);
  }
};

mkdirp = function(path, options, callback) {
  if (options == null) {
    options = {};
  }
  if (arguments.length === 3 && $.isFunction(arguments[2])) {
    return mkdirp_async.apply(this, arguments);
  } else if (arguments.length === 2 && $.isFunction(arguments[1])) {
    return mkdirp_async(arguments[0], {}, arguments[1]);
  } else {
    return mkdirp_sync.apply(this, arguments);
  }
};

mkdirp_async = function(path, options, callback) {
  var mode, parent, _ref1;
  if (options == null) {
    options = {};
  }
  mode = (_ref1 = options.mode) != null ? _ref1 : 0x1ed;
  parent = $.dirname(path);
  return $.exists(parent, function(isExists) {
    var completion;
    completion = function(err) {
      if (err != null) {
        return callback(err);
      }
      return $.mkdir(path, mode, callback);
    };
    if (isExists) {
      return completion(null);
    } else {
      return mkdirp_async(parent, options, completion);
    }
  });
};

mkdirp_sync = function(path, options) {
  var mode, parent;
  if (options == null) {
    options = {};
  }
  mode = options.mode || 0x1ed;
  parent = $.dirname(path);
  if (!$.existsSync(parent)) {
    mkdirp_sync(parent, options);
  }
  if (!$.existsSync(path)) {
    return $.mkdirSync(path, mode);
  }
};

module.exports = {
  initDBFS: initDBFS,
  freeDBFS: freeDBFS,
  is_dbfs: is_dbfs,
  basename: basename,
  read: read,
  write: write,
  ss_coffee: ss_coffee,
  ss_stylus: ss_stylus,
  ss_mustache: ss_mustache,
  ss_coffeekup: ss_coffeekup,
  ss_merge: ss_merge,
  ss_js: ss_js,
  ss_html: ss_html,
  fs_coffee: fs_coffee,
  fs_stylus: fs_stylus,
  fs_mustache: fs_mustache,
  fs_coffeekup: fs_coffeekup,
  fs_merge: fs_merge,
  fs_js: fs_js,
  fs_html: fs_html,
  sf_coffee: sf_coffee,
  sf_stylus: sf_stylus,
  sf_mustache: sf_mustache,
  sf_coffeekup: sf_coffeekup,
  sf_merge: sf_merge,
  sf_js: sf_js,
  sf_html: sf_html,
  ff_coffee: ff_coffee,
  ff_stylus: ff_stylus,
  ff_mustache: ff_mustache,
  ff_coffeekup: ff_coffeekup,
  ff_merge: ff_merge,
  ff_js: ff_js,
  ff_html: ff_html,
  ff_copy: ff_copy,
  cake: cake,
  mkdirp: mkdirp,
  COFFEE: COFFEE,
  STYLUS: STYLUS,
  COFFEEKUP: COFFEEKUP,
  MUSTACHE: MUSTACHE,
  JSTF: JSTF,
  TRANSFORM_COFFEESCRIPT_REPLACER: TRANSFORM_COFFEESCRIPT_REPLACER,
  TRANSFORM_NAMESPACE_WRAPPER: TRANSFORM_NAMESPACE_WRAPPER
};
