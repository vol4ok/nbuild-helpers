// Generated by CoffeeScript 1.4.0
var $, ASTCoffeeScriptReplacer, ASTDepManager, ASTNamespaceWrapper, ASTWalker, Syntax, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$ = global.$ || false;

if (!$) {
  $ = require('core.js');
  $.ext(require('fs'));
  $.ext(require('path'));
  $.ext(require('util'));
  $.ext(require('child_process'));
}

_ref = require('./ast-walker'), ASTWalker = _ref.ASTWalker, Syntax = _ref.Syntax;

ASTDepManager = (function(_super) {

  __extends(ASTDepManager, _super);

  function ASTDepManager(options) {
    ASTDepManager.__super__.constructor.apply(this, arguments);
  }

  ASTDepManager.prototype.CallExpression = function(node) {
    var target;
    target = false;
    if (node.callee.type === Syntax.Identifier) {
      target = node.callee;
    } else if (node.callee.type === Syntax.MemberExpression && node.callee.object.type === Syntax.Identifier && node.callee.property.type === Syntax.Identifier) {
      if (node.callee.property.name === "call") {
        target = node.callee.object;
      } else if (node.callee.property.name === "apply") {
        target = node.callee.object;
      }
    }
    if (target) {
      if (target.name === 'require') {
        target.name = "$.bind";
      }
    }
    node = ASTDepManager.__super__.CallExpression.call(this, node);
    return node;
  };

  return ASTDepManager;

})(ASTWalker);

ASTNamespaceWrapper = (function(_super) {

  __extends(ASTNamespaceWrapper, _super);

  function ASTNamespaceWrapper(options) {
    ASTNamespaceWrapper.__super__.constructor.apply(this, arguments);
    this.names = $.isArray(options.name) ? options.name : [options.name];
  }

  ASTNamespaceWrapper.prototype.Program = function(node) {
    node = ASTNamespaceWrapper.__super__.Program.call(this, node);
    node.body = this.wrap(node.body);
    return node;
  };

  ASTNamespaceWrapper.prototype.wrap = function(body) {
    var arg, args, name, _i, _len, _ref1;
    args = [];
    if (this.names.length > 0) {
      arg = {
        type: "ArrayExpression",
        elements: []
      };
      _ref1 = this.names;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        name = _ref1[_i];
        arg.elements.push({
          type: "Literal",
          value: name
        });
      }
      args.push(arg);
    }
    arg = {
      type: "FunctionExpression",
      id: null,
      params: [
        {
          type: "Identifier",
          name: "exports"
        }
      ],
      body: {
        type: "BlockStatement",
        body: body
      }
    };
    args.push(arg);
    return [
      {
        type: "ExpressionStatement",
        expression: {
          type: "CallExpression",
          callee: {
            type: "MemberExpression",
            computed: false,
            object: {
              type: "Identifier",
              name: "$"
            },
            property: {
              type: "Identifier",
              name: "ns"
            }
          },
          "arguments": args
        }
      }
    ];
  };

  return ASTNamespaceWrapper;

})(ASTWalker);

ASTCoffeeScriptReplacer = (function(_super) {

  __extends(ASTCoffeeScriptReplacer, _super);

  function ASTCoffeeScriptReplacer(options) {
    ASTCoffeeScriptReplacer.__super__.constructor.apply(this, arguments);
    this["delete"] = [];
  }

  ASTCoffeeScriptReplacer.prototype.on_walkComplete = function(node) {
    var a, m, parent, path;
    while (this["delete"].length > 0) {
      path = this["delete"].pop();
      if (m = /^(.+)\[(\d+)\]$/.exec(path)) {
        a = this.get(node, m[1]);
        a.remove(parseInt(m[2], 10));
        if (a.length === 0) {
          parent = /^(.*\[(\d+)\])->.+$/.exec(path)[1];
          this["delete"].push(parent);
        }
      }
    }
    return node;
  };

  ASTCoffeeScriptReplacer.prototype.FunctionDeclaration = function(node) {
    return ASTCoffeeScriptReplacer.__super__.FunctionDeclaration.call(this, node);
  };

  ASTCoffeeScriptReplacer.prototype.FunctionExpression = function(node) {
    return ASTCoffeeScriptReplacer.__super__.FunctionExpression.call(this, node);
  };

  ASTCoffeeScriptReplacer.prototype.VariableDeclarator = function(node) {
    if (node.id && /__(hasProp|extends|indexOf|slice|bind)/.test(node.id.name)) {
      this["delete"].push(this.path());
      return node;
    }
    return ASTCoffeeScriptReplacer.__super__.VariableDeclarator.call(this, node);
  };

  ASTCoffeeScriptReplacer.prototype.CallExpression = function(node) {
    var target;
    target = false;
    if (node.callee.type === Syntax.Identifier) {
      target = node.callee;
    } else if (node.callee.type === Syntax.MemberExpression && node.callee.object.type === Syntax.Identifier && node.callee.property.type === Syntax.Identifier) {
      if (node.callee.property.name === "call") {
        target = node.callee.object;
      } else if (node.callee.property.name === "apply") {
        target = node.callee.object;
      }
    }
    if (target) {
      if (target.name === '__bind') {
        target.name = "$.bind";
      } else if (target.name === '__extends') {
        target.name = "$.inherit";
      } else if (target.name === '__hasProp') {
        target.name = "$.hasProp";
      } else if (target.name === '__indexOf') {
        target.name = "$.indexOf";
      } else if (target.name === '__slice') {
        target.name = "$.slice";
      }
    }
    node = ASTCoffeeScriptReplacer.__super__.CallExpression.call(this, node);
    return node;
  };

  return ASTCoffeeScriptReplacer;

})(ASTWalker);

__extends(exports, {
  ASTDepManager: ASTDepManager,
  ASTNamespaceWrapper: ASTNamespaceWrapper,
  ASTCoffeeScriptReplacer: ASTCoffeeScriptReplacer
});
