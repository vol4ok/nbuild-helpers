// Generated by CoffeeScript 1.3.3
var A, Base, a,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Base = (function() {
  var privateVar;

  privateVar = 4;

  function Base() {
    privateVar = 5;
  }

  Base.prototype.methodA = function() {
    return "test" + this.fieldA + "+" + privateVar;
  };

  return Base;

})();

A = (function(_super) {

  __extends(A, _super);

  function A() {
    this.methodB = __bind(this.methodB, this);
    A.__super__.constructor.apply(this, arguments);
    this.fieldA = 123;
    this.pMethB = methodB;
  }

  A.prototype.methodB = function(a) {
    if (a === 1 || a === 2 || a === 3) {
      return this.methodA() + a;
    } else {
      return false;
    }
  };

  return A;

})(Base);

a = new A;

a.methodB(1);
